import threading
import socket
import time
import mongo_dao
import rsa
import pickle
import logging

logging.basicConfig(filename='app_log.txt', level=logging.DEBUG,
                    format=f'%(levelname)s %(asctime)s %(name)s %(threadName)s : %(message)s')


def log(typ: str, text: str):
    '''
    [!] Information\n
    [#] Important or Warning\n
    [.] Process\n
    [-] Error\n
    [+] Success\n
    [N] Count
    '''

    from datetime import datetime
    timestamp = datetime.now()

    typ = '[' + typ + ']'
    with open('logfile.txt', 'a') as file:
        file.write(typ + ' ' + str(timestamp) + ' ' + text + '\n')


# Return Codes
rcd = {
    "-100": '[#] IDS Triggered ! Unauthorized User',
    "-99": 'Authentication Failure',
    "-98": 'Signup Failure',
    "-97": 'Update Error',
}


# Convert String to Public Key
def get_key(key: str) -> rsa.PublicKey:
    key = key[10:-1]
    key_numeric = [i for i in map(int, key.split(','))]
    return rsa.PublicKey(key_numeric[0], key_numeric[1])


# configuration
BUFFER_SIZE = 5210
IP = '0.0.0.0'
PORT = 27526

# Initial Global Authentication
# Server Global
__server_public_key__ = 'PublicKey(531836556116849503526789038592954213414151379898321835881401907556007177415927997307542592331199274089794331573843691592574639966270561486557382534282742103050057822993660888083548379856155488483196639832097391417134087217005299569802699831391478549250744498375602059643144903775349274801998146688120183504125221051061736348327457268507586608176443284233413990577635177136336631459383851827187507721004587701804374282750434372917940361127765542157619677292146401841569985916480798394424532280393237433015726920840531167288665933370139294868651026141601666325426407672025889314600906028786618408177562737233790002944266034792992474306740850812523601523756217918206069415070327585539353356359071939307735577061091608639360563326396192850344390658852913223887011225691903782488742287948888014633114365077164593903473318600607600949451658093178850075458821016403433532568744679880492952441636867853655522362814535616187809821323397068788947480892419246810990841597653670945038818458829019200666865229015233677540241824247978388149314379895411043381152108020013195083056299043554246377658123133279533462604856780710681653462894342224519486425570059768811070058412378593332019844589337496030320729967749686813819445032235455418790559505833, 65537)'
__server_private_key__ = rsa.PrivateKey

# Client Global
__client_initial_public_key__ = rsa.PublicKey(578198453259670039019636013090940026799659645944564293448663722521623793018039481177959591072712284209107030191350694207884016489756822609577941996499949397575929296921489051038414368542686434603376664176981445526502037743840876252191278746897266370061459332403535515451811396994925733720535132744982147586068505821971873258798865594021961248329306231549388276031974828015262677359940070995907518571369799458225210240961089404564929583561051357064078611311733902099186741097402712296230704339907117604010597534325611008238031425356320128600753613520778586235115686880033809224890728375842917474778600479972380925338823045397680964467487039004687134864285191106123357959554154136661786732768518048514262122511763834578241851872618279817023789483996698601334619392788999639316353284947730052428356071935743720461619690928689688343249300613498901784439622466606845797526008676855500010629281793232911499859021035506868506620678196766766520481536598971822308178688601476112109259227361897737886178302914782615469830104071521799015954532551466951306367537884446355613003109742557088605860270464086670142943967318731686168454230523291649582084753674120426473751070138511249918778843922601863177576363717592633458441366881996258624016521969,65537)
__client_initial_private_key__ = rsa.PrivateKey

# Server Database Connection
_srv_db = mongo_dao.MongoDAO()

# Server Initialization
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_socket.bind((IP, PORT))
server_socket.listen()

print(f'Listening for connections on {IP}:{PORT}...!')

# Active Client List
active_clients = list()

# Log out Error Packet
error_logout_packet = pickle.dumps([rsa.encrypt('Logging Out , Facing error with your Account, Try to Re Signin'.encode(), __client_initial_public_key__), rsa.encrypt('errorlogout'.encode(),__client_initial_public_key__)])


# return codes Packet
def rcd_packet(code : int):

    if code == -100:
        typ = rsa.encrypt('IDS_Warning'.encode(), __client_initial_public_key__)
    else:
        typ = rsa.encrypt('exception'.encode(), __client_initial_public_key__)

    er = rsa.encrypt(rcd[str(code)].encode(), __client_initial_public_key__)
    return pickle.dumps([typ,er])


# Per client Handler Class
class Handler:

    def __init__(self, userid : str, password : str, publickey : str, sock : socket.socket, adrs : tuple):

        _srv_db.update_by('Profiles', 'user_id', userid, {"public_key":publickey})
        self.user_id = userid
        self.password = password
        self.str_publickey = publickey
        self.public_key = get_key(publickey)
        self.user_socket = sock
        self.user_address = adrs
        self.status = True
        self.database = mongo_dao.MongoDAO(userid)

    # pickle packet Creator
    def manifest_packet(self, payload, rcvd_metadata) -> bytes:

        drop = list()
        drop.append(payload)
        info = [self.user_id, rcvd_metadata[1], rcvd_metadata[2]]
        metadata = list()
        for value in info:
            metadata.append(rsa.encrypt(value.encode(), self.public_key))

        drop.append(metadata)
        drop.append(rsa.encrypt('msg'.encode(), self.public_key))

        return pickle.dumps(drop)

    def send_msg(self, client : socket.socket, packet: bytes):

        try:
            client.send(packet)
        except:
            log('-',f'Error Sending Message with client {self.user_id}, Address {self.user_address} ')
            try:
                client.send(error_logout_packet)
            except:
                del self
            del self

    # Client Received Message Handler
    def receive_msg_handler(self):

        packet = self.user_socket.recv(BUFFER_SIZE)

        if len(packet):

            # Message Send Request Handler
            packet = pickle.loads(packet)

            pkt_typ = rsa.decrypt(packet[-1], __server_private_key__).decode()

            # Handling Incoming Packet
            if pkt_typ == 'msg':

                payload = packet[0]
                rcvd_metadata = list()
                for values in packet[1]:
                    rcvd_metadata.append(rsa.decrypt(values,__server_private_key__).decode())

                # Searching Receiver Object Handel
                rcvr_handler = next((x for x in active_clients if x.user_id == rcvd_metadata[0]), None)      # DEBUG

                # Creating Forward Packet
                packet = self.manifest_packet(payload, rcvd_metadata)

                if not rcvr_handler:
                    pass
                else:
                    self.send_msg(rcvr_handler.user_socket,packet)

            # Handling Status update packet
            elif pkt_typ == 'status':

                def update_status():
                    self.status = True
                    time.sleep(60)
                    self.status = False

                status_thread = threading.Thread(target=update_status)
                status_thread.start()

            # Password Change Request Handler
            elif pkt_typ == 'passwd':
                userid = rsa.decrypt(packet[1], __server_private_key__).decode()

                if userid == self.user_id:
                    newpass = rsa.decrypt(packet[0], __server_private_key__).decode()
                    try:
                        _srv_db.update_by('Profiles', 'user_id', self.user_id, {"password": newpass})

                    except:
                        self.send_msg(self.user_socket,rcd_packet(-97))
                else:
                    self.send_msg(self.user_socket,rcd_packet(-100))
            else:
                self.send_msg(self.user_socket,rcd_packet(-100))

    def initiate_user(self):
        while True:
            self.receive_msg_handler()
        # recv_thread = threading.Thread(target= self.receive_msg_handler)
        # recv_thread.start()


# Message type Handler  (packet received, socket object, address of client)
def msg_classifier(packet, sock : socket.socket = None, adrs = None):

    # Received Bytes to list
    drop = pickle.loads(packet)
    # Packet type
    pkt_typ = rsa.decrypt(drop[-1], __server_private_key__).decode()

    # Login Request Handler
    if pkt_typ == 'login':

        password = rsa.decrypt(drop[0], __server_private_key__).decode()
        userid = rsa.decrypt(drop[1], __server_private_key__).decode()
        publickey = rsa.decrypt(drop[2], __server_private_key__).decode()

        if password == _srv_db.get_user_password(userid):
            if sock and adrs:
                client = Handler(userid, password, publickey, sock, adrs)

                active_clients.append(client)       # Adding to active clients list, HASHING

                client_thread = threading.Thread(target=client.initiate_user)
                client_thread.start()
            else:
                sock.send(rcd_packet(-100))
        else:
            sock.send(rcd_packet(-99))

    # Signup Request Handler
    elif pkt_typ == 'signup':

        try:
            metadata = rsa.decrypt(drop[1], __server_private_key__).decode()
            js_obj = {
                "user_id": metadata[0],
                "password": metadata[1],
                "public_key": metadata[2],
                "username": metadata[3]
            }

            _srv_db.insert('Profiles', js_obj)
        except:
            sock.send(rcd_packet(-98))

    # Public Key Fetch Request Handler
    elif pkt_typ == 'publickey':
        user_id = rsa.decrypt(drop[0], __server_private_key__).decode()
        if user_id == '#0000':
            sock.send(rsa.encrypt(__server_public_key__.encode(),__client_initial_public_key__))
        else:
            sock.send(rcd_packet(-100))

    # IDS condition, Invalid Request
    else:
        sock.send(rcd_packet(-100))


if __name__ == '__main__':

    def starting_server():

        first_packet = b''
        client_socket , client_address = server_socket.accept()
        client_socket.send(f'Hello {client_address} You are connected'.encode())

        pack = client_socket.recv(BUFFER_SIZE)
        first_packet += pack
        print(first_packet)
        if first_packet:
            msg_classifier(first_packet,client_socket, client_address)


    while True:
        server_thread = threading.Thread(target=starting_server())
        try:
            server_thread.start()
        except:

            log('#', 'Server Reset')
            pass


## IMPORTANT DATA LIMITER
    # SEND
    # Receive
    # Encrypt
    # Decrypt