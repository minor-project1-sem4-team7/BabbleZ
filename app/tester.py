import pickle
import pymongo
import rsa

pub = rsa.PublicKey(
    578198453259670039019636013090940026799659645944564293448663722521623793018039481177959591072712284209107030191350694207884016489756822609577941996499949397575929296921489051038414368542686434603376664176981445526502037743840876252191278746897266370061459332403535515451811396994925733720535132744982147586068505821971873258798865594021961248329306231549388276031974828015262677359940070995907518571369799458225210240961089404564929583561051357064078611311733902099186741097402712296230704339907117604010597534325611008238031425356320128600753613520778586235115686880033809224890728375842917474778600479972380925338823045397680964467487039004687134864285191106123357959554154136661786732768518048514262122511763834578241851872618279817023789483996698601334619392788999639316353284947730052428356071935743720461619690928689688343249300613498901784439622466606845797526008676855500010629281793232911499859021035506868506620678196766766520481536598971822308178688601476112109259227361897737886178302914782615469830104071521799015954532551466951306367537884446355613003109742557088605860270464086670142943967318731686168454230523291649582084753674120426473751070138511249918778843922601863177576363717592633458441366881996258624016521969,
    65537)
priv = rsa.PrivateKey(
    578198453259670039019636013090940026799659645944564293448663722521623793018039481177959591072712284209107030191350694207884016489756822609577941996499949397575929296921489051038414368542686434603376664176981445526502037743840876252191278746897266370061459332403535515451811396994925733720535132744982147586068505821971873258798865594021961248329306231549388276031974828015262677359940070995907518571369799458225210240961089404564929583561051357064078611311733902099186741097402712296230704339907117604010597534325611008238031425356320128600753613520778586235115686880033809224890728375842917474778600479972380925338823045397680964467487039004687134864285191106123357959554154136661786732768518048514262122511763834578241851872618279817023789483996698601334619392788999639316353284947730052428356071935743720461619690928689688343249300613498901784439622466606845797526008676855500010629281793232911499859021035506868506620678196766766520481536598971822308178688601476112109259227361897737886178302914782615469830104071521799015954532551466951306367537884446355613003109742557088605860270464086670142943967318731686168454230523291649582084753674120426473751070138511249918778843922601863177576363717592633458441366881996258624016521969,
    65537,
    577986713892927098681560250326178402669119770278869044306304933908466050505681073750883725070518941596216318551748753065308231568326879772056696431278532506574787616601576395023874155459313309888628033022973060115320017680275986479542964196491762084041631219673662545185078963811718107225436290210446243111617956603366698701553169685233696190881453822230115417667619312873093119640535176635410367642189140056864186620017453502010501423742849955831652075359958849630346536605492224097272718211397149634428586542964642171333722214464632201428523909891920098875766879695006712906443480297214332555689131221928184017116570674551815855207301001881991682881531124437591816735962198671839020860220395173900414774787352988345965981759177358679198671553072447648973752264245982460047766026046251203354769624142868913904995698528189940061956738319104707877387787182773953115228107143302093771634775705091715415478992399185959085890961981421685515321561995620812972485150637978445680775968534630789876056467588139361228435683782637966518479581859714463606997461280578156584116046650966191611237539520678188290886658995818238043314998273653112489929361709385339664790345419473777456433717110966638171541994626650899138846345266095422249598374213,
    10378395861299891975208895225729177902914259384182029863349146367499264960496493410865409675245610368728334360042451670157061801530765901897048815975999137754774333986237954173352347966122388342084887448984076431972480712663187885315951993596168848449685061688034407421186264746237237054232347994669463350556563855101694002045347537892364388190031333419942839800527419281900518519615434120466898271257726766074310403475035646401323398267962548654224301719725220896979621498346837669426654927445539810734951812055474446724988242143678003275928328166623450957290490760426357733598759089699431145276560498969583215206739524490972586702988359273402306595868439,
    55711736282455774441920112196894939000627866282745915915387274486389176865710594317238417580627083778940757304973874366531516836256537216494826287481116989092619188610713630983396051238535543471582979517311255578177375810365884629244194223966216629073115011811513725687918153762706254113624502383136601522492509532308495110968086984258584152496786309290479744034686447316012919120567688179389139075940763055775420412133799788303866532699253075888670230097111423584851849739741169747164195149856055473470700238971351428854969715949373809373527633433544909002220247077647966825271)

if __name__ == '__main__':
    # host = 'localhost'
    # port = '27017'
    # database = 'BabbleZ'
    #
    # db_client = pymongo.MongoClient(f'mongodb://{host}:{port}')
    #
    #
    # # def insert(collection, json):
    # #     obj_id = db_client[database][collection].insert(json)
    # #     return str(obj_id)
    # #
    #
    # def get_one( collection, filter_field, filter_value):
    #     results = db_client[database][collection].find({filter_field: filter_value})
    #     for result in results:
    #         return result
    # #
    # #
    # #
    # # # li = ['Testing String', 'Testing Encoded String'.encode(), rsa.encrypt('Testing Encrypt String'.encode(), pub)]
    # # # ob = pickle.dumps(li)
    # # #
    # # # id = insert('Friends', json={'object':ob})
    # #
    # # # res = get_one('Friends','_id', '607c0093d80116cbd20ca476')
    # # res = get_one('Friends','_id', '6061462fe1f16e15c1b22760')
    # # print(res, type(res))
    # #
    # #
    # def search_one( collection, json):
    #     results = db_client[database][collection].find(json)
    #     for result in results:
    #         return result
    #
    # def if_user_exist( user_id):
    #     if search_one('Friends', {"user_id": user_id}):
    #         return True
    #     else:
    #         return False
    #
    # def get_user_password( user_id):
    #     return get_one("Profile", "user_id", user_id)["password"]
    #
    #
    # print(get_user_password('superuser_Arnav'))

    import socket

    soc = socket.socket()
    try:
        soc.connect(('192.154.186.342',8000))
    except Exception as e:
        print(e)